package Frame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import Vendedor.persisitencia.AnadirV2;
import static Vendedor.persisitencia.AnadirV2.idvende;
import Vendedor.persisitencia.EditarV;
import Vendedor.persisitencia.Inventario;
import static Vendedor.persisitencia.Inventario.cantidadt;
import static Vendedor.persisitencia.Inventario.descripciont;
import static Vendedor.persisitencia.Inventario.idt;
import static Vendedor.persisitencia.Inventario.nombret;
import static Vendedor.persisitencia.Inventario.preciot;
import static Vendedor.persisitencia.Inventario.tipot;
import Vendedor.persisitencia.RenderImagen;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author willm
 */
public class AllProductos extends javax.swing.JFrame {

    /**
     * Creates new form AllProductos
     */
    public static String NombrePC;
    public static int idProductoC;
    public static float precioc;
    public static float cantidadc;
    public static int idcarritocompra;
    public static Integer IDCliente;
    public static Integer IDVendedor;
    public static Integer ventana;
    public static String filtro;
    public AllProductos() throws SQLException, IOException {
        initComponents();
        this.setLocationRelativeTo(null);
        menu ventanauno= new menu();
        IDCliente=ventanauno.IDCliente;
        ventana=ventanauno.ventana;
        IDVendedor=ventanauno.IDVendedor;
        filtro=ventanauno.filtro;
        System.out.println(IDVendedor);
        if(ventana==1){
            MostrarProductos();
        }else if(ventana==2){
            MostrarProductosVendedor(); 
        }else if(ventana==3){
            BuscarProducto();
        }
        
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaproductos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Franchise", 1, 48)); // NOI18N
        jLabel1.setText("Productos");

        tablaproductos.setBackground(new java.awt.Color(102, 0, 0));
        tablaproductos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tablaproductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaproductos);

        jButton1.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jButton1.setText("Agregar a Carrito");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/home.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        jLabel2.setText("Cantidad");

        jComboBox2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "1.5", "2", "2.5", "3", "3.5", "4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(419, 419, 419)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(149, 149, 149))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(523, 523, 523)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1022, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jButton2))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            menu pant1 = new menu();
            pant1.setVisible(true);
        
        } catch (IOException ex) {
            Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
        }
             this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public void Espera() throws InterruptedException{
        
        Cantidad ventana;
            try {
                ventana = new Cantidad();
                ventana.setVisible(true);
                
                cantidadc = ventana.cantidadc;
                System.out.println("Sale de cantidad"+cantidadc);
                Esperaready();
            } catch (SQLException ex) {
                Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }
    public void Esperaready() throws SQLException{
        
        String DB="XcRj6qcf4U";
                String URL="jdbc:mysql://remotemysql.com:3306/XcRj6qcf4U";
                String USER="XcRj6qcf4U";
                String PASS="p3SRSqI4Za";

                PreparedStatement pps = null;
                Statement st = null;

                Connection con = null;
                FileInputStream fi= null;


                try {

                    con = DriverManager.getConnection(URL,USER,PASS);
                    pps = con.prepareStatement("INSERT INTO Productocompra VALUES(?,?,?,?,?)");
                    pps.setString(1, NombrePC);
                    pps.setFloat(2,idcarritocompra);
                    pps.setFloat(3,precioc);
                    
                    
                    pps.setFloat(4, cantidadc);
                    pps.setInt(5,idProductoC);
                    


                    pps.executeUpdate();
                    
                    JOptionPane.showMessageDialog(null,"Producto Agregado a Carrito");
                    

                } catch (SQLException ex) {
                    Logger.getLogger(AnadirV2.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null,"No se pudo Guardar Producto");
                }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pps != null) {
                    con.close();
                }
                if (st != null) {
                    con.close();
                }
            } catch (SQLException sqle) {
                JOptionPane.showMessageDialog(null, "Error al cerrar la conexion");
                Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, sqle);
            }
        }
    }
    public void BuscarProducto() throws SQLException{
        tablaproductos.setDefaultRenderer(Object.class, new RenderImagen());
        
        
        String DB="XcRj6qcf4U";
        String URL="jdbc:mysql://remotemysql.com:3306/XcRj6qcf4U";
        String USER="XcRj6qcf4U";
        String PASS="p3SRSqI4Za";
       
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripcion");
        modelo.addColumn("Precio");
        modelo.addColumn("Tipo");
        modelo.addColumn("ID");
        modelo.addColumn("Imagen");
        tablaproductos.setModel(modelo);
        
        
        String sql = "SELECT * FROM Producto WHERE Nombre LIKE '"+filtro+"' OR Descripcion LIKE '"+filtro+"'OR Tipo LIKE '"+filtro+"'";
        Object datos[]= new Object[6];
        Statement st = null;

        Connection con = null;
         PreparedStatement pps = null ;
        try{
           Class.forName("com.mysql.jdbc.Driver");
           con = DriverManager.getConnection(URL,USER,PASS);
           pps= con.prepareStatement(sql);
           ResultSet rs=pps.executeQuery();
            while(rs.next()){
               datos[0]=rs.getObject(1);
               datos[1]=rs.getObject(2);
               datos[2]=rs.getObject(4);
               datos[3]=rs.getObject(5);
               datos[4]=rs.getObject(6);
               
               //imagen Render
               Blob blob = rs.getBlob(7);

               byte[] data = blob.getBytes(1,(int)blob.length());
               BufferedImage img = null;
               try{
                   img= ImageIO.read(new ByteArrayInputStream(data));
               }catch(IOException e){
                   
               }
               if(img!=null){
                   ImageIcon icono = new ImageIcon(img);
                datos[5] = new JLabel(icono);
               }
               
               ////Fin render
               
               
               modelo.addRow(datos);
           }
            rs.close();
           tablaproductos.setModel(modelo);
           tablaproductos.setRowHeight(64);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"Error al visualizar");
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pps != null) {
                    con.close();
                }
                if (st != null) {
                    con.close();
                }
            } catch (SQLException sqle) {
                JOptionPane.showMessageDialog(null, "Error al cerrar la conexion");
                Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, sqle);
            }
        }
        
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //Agregar A carro
        int fila = tablaproductos.getSelectedRow();
        
        if(fila>=0){
            NombrePC=tablaproductos.getValueAt(fila, 0).toString();
            idcarritocompra=IDCliente;
            precioc=Float.parseFloat(tablaproductos.getValueAt(fila, 2).toString());
            cantidadc=Float.parseFloat( jComboBox2.getSelectedItem().toString());
            idProductoC=(int) tablaproductos.getValueAt(fila, 4);
            try {
                Esperaready();
                //Agregando ProductoCompra
            } catch (SQLException ex) {
                Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else{
            JOptionPane.showMessageDialog(null,"Fila no Seleccionada");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    void MostrarProductos() throws SQLException, IOException{
        /*CONEXION A BD*/
        
        tablaproductos.setDefaultRenderer(Object.class, new RenderImagen());
        
        
        String DB="XcRj6qcf4U";
        String URL="jdbc:mysql://remotemysql.com:3306/XcRj6qcf4U";
        String USER="XcRj6qcf4U";
        String PASS="p3SRSqI4Za";
       
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripcion");
        modelo.addColumn("Precio");
        modelo.addColumn("Tipo");
        modelo.addColumn("ID");
        modelo.addColumn("Imagen");
        tablaproductos.setModel(modelo);
        
        
        String sql = "SELECT * FROM Producto";
        Object datos[]= new Object[6];
        Statement st = null;

        Connection con = null;
         PreparedStatement pps = null ;
        try{
           Class.forName("com.mysql.jdbc.Driver");
           con = DriverManager.getConnection(URL,USER,PASS);
           pps= con.prepareStatement(sql);
           ResultSet rs=pps.executeQuery();
            while(rs.next()){
               datos[0]=rs.getObject(1);
               datos[1]=rs.getObject(2);
               datos[2]=rs.getObject(4);
               datos[3]=rs.getObject(5);
               datos[4]=rs.getObject(6);
               
               //imagen Render
               Blob blob = rs.getBlob(7);

               byte[] data = blob.getBytes(1,(int)blob.length());
               BufferedImage img = null;
               try{
                   img= ImageIO.read(new ByteArrayInputStream(data));
               }catch(IOException e){
                   
               }
               if(img!=null){
                   ImageIcon icono = new ImageIcon(img);
                datos[5] = new JLabel(icono);
               }
               
               ////Fin render
               
               
               modelo.addRow(datos);
           }
            rs.close();
           tablaproductos.setModel(modelo);
           tablaproductos.setRowHeight(64);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"Error al visualizar");
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pps != null) {
                    con.close();
                }
                if (st != null) {
                    con.close();
                }
            } catch (SQLException sqle) {
                JOptionPane.showMessageDialog(null, "Error al cerrar la conexion");
                Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, sqle);
            }
        }
        
    }
    void MostrarProductosVendedor() throws SQLException, IOException{
        /*CONEXION A BD*/
        
        tablaproductos.setDefaultRenderer(Object.class, new RenderImagen());
        String DB="XcRj6qcf4U";
        String URL="jdbc:mysql://remotemysql.com:3306/XcRj6qcf4U";
        String USER="XcRj6qcf4U";
        String PASS="p3SRSqI4Za";
       
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripcion");
        modelo.addColumn("Precio");
        modelo.addColumn("Tipo");
        modelo.addColumn("ID");
        modelo.addColumn("Imagen");
        tablaproductos.setModel(modelo);
        
        
        String sql = "SELECT * FROM Producto WHERE ID_Inventario= '"+IDVendedor+"'";
        Object datos[]= new Object[6];
        Statement st = null;

        Connection con = null;
         PreparedStatement pps = null ;
        try{
           Class.forName("com.mysql.jdbc.Driver");
           con = DriverManager.getConnection(URL,USER,PASS);
           pps= con.prepareStatement(sql);
           ResultSet rs=pps.executeQuery();
            while(rs.next()){
               datos[0]=rs.getObject(1);
               datos[1]=rs.getObject(2);
               datos[2]=rs.getObject(4);
               datos[3]=rs.getObject(5);
               datos[4]=rs.getObject(6);
               
               //imagen Render
               Blob blob = rs.getBlob(7);

               byte[] data = blob.getBytes(1,(int)blob.length());
               BufferedImage img = null;
               try{
                   img= ImageIO.read(new ByteArrayInputStream(data));
               }catch(IOException e){
                   
               }
               if(img!=null){
                   ImageIcon icono = new ImageIcon(img);
                datos[5] = new JLabel(icono);
               }
               
               ////Fin render
               
               
               modelo.addRow(datos);
           }
            rs.close();
           tablaproductos.setModel(modelo);
           tablaproductos.setRowHeight(64);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"Error al visualizar");
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pps != null) {
                    con.close();
                }
                if (st != null) {
                    con.close();
                }
            } catch (SQLException sqle) {
                JOptionPane.showMessageDialog(null, "Error al cerrar la conexion");
                Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, sqle);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AllProductos().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(AllProductos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaproductos;
    // End of variables declaration//GEN-END:variables
}
